TODO 1: Implement helper_files. Think header files. You
still would like to compare them like .c files, but you'd never
use them in the shell comamnd. Separating watch_files from build_files
will make it easier to drop them in shell commands.

```
build_files: "main.c" !"helper.o" .
Helper(String)
```

RULE EXECUTION RULE (Add This Description to the readme and simplify the
readme).
If inputs are newer than outputs, then execute .

INPUT FILES TYPES
build_files : Input files that will be used in shell commands.
helper_files: Input files that will NOT be used in shell commands.
output_files: ...

rule Helper {
    /* Inputs */
    build_files : "helper.c" .
    helper_files: "helper.h" .

    /* Outputs */
    output_files: "helper.o" .

    $ gcc -o $output_files -c $build_files
}


TODO 2:
Make the xbt interpreter read "build.xbt" file in the current directory or error when ran
instead of requiring a file path.


DONE WITH 0.2.0


A fun little program:
    Search up a directory tree on your computer, then all the way back down it collecting
    paths to Makefiles. Then execute a random one :)
