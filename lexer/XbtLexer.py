# Generated from lexer/XbtLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,213,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,5,2,65,8,2,10,2,12,2,68,
        9,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
        1,19,5,19,151,8,19,10,19,12,19,154,9,19,1,19,1,19,1,19,1,20,1,20,
        4,20,161,8,20,11,20,12,20,162,1,20,4,20,166,8,20,11,20,12,20,167,
        1,20,1,20,1,21,1,21,4,21,174,8,21,11,21,12,21,175,1,21,5,21,179,
        8,21,10,21,12,21,182,9,21,1,22,4,22,185,8,22,11,22,12,22,186,1,22,
        5,22,190,8,22,10,22,12,22,193,9,22,1,23,4,23,196,8,23,11,23,12,23,
        197,1,23,5,23,201,8,23,10,23,12,23,204,9,23,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,3,66,152,167,0,26,1,3,3,4,5,5,7,6,9,7,11,8,13,
        9,15,10,17,11,19,12,21,13,23,14,25,15,27,1,29,2,31,16,33,25,35,26,
        37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,1,0,5,4,0,45,45,
        65,90,95,95,97,122,5,0,45,45,47,47,65,90,95,95,97,122,4,0,45,47,
        65,90,95,95,97,122,6,0,33,33,45,47,63,63,65,90,95,95,97,122,3,0,
        9,9,13,13,32,32,222,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,58,1,0,0,0,5,62,1,0,
        0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,75,1,0,0,0,13,77,1,0,0,0,15,79,
        1,0,0,0,17,81,1,0,0,0,19,83,1,0,0,0,21,85,1,0,0,0,23,87,1,0,0,0,
        25,90,1,0,0,0,27,92,1,0,0,0,29,106,1,0,0,0,31,121,1,0,0,0,33,134,
        1,0,0,0,35,139,1,0,0,0,37,144,1,0,0,0,39,146,1,0,0,0,41,158,1,0,
        0,0,43,171,1,0,0,0,45,184,1,0,0,0,47,195,1,0,0,0,49,205,1,0,0,0,
        51,209,1,0,0,0,53,54,5,114,0,0,54,55,5,117,0,0,55,56,5,108,0,0,56,
        57,5,101,0,0,57,2,1,0,0,0,58,59,5,99,0,0,59,60,5,109,0,0,60,61,5,
        100,0,0,61,4,1,0,0,0,62,66,5,34,0,0,63,65,9,0,0,0,64,63,1,0,0,0,
        65,68,1,0,0,0,66,67,1,0,0,0,66,64,1,0,0,0,67,69,1,0,0,0,68,66,1,
        0,0,0,69,70,5,34,0,0,70,6,1,0,0,0,71,72,5,123,0,0,72,8,1,0,0,0,73,
        74,5,125,0,0,74,10,1,0,0,0,75,76,5,40,0,0,76,12,1,0,0,0,77,78,5,
        41,0,0,78,14,1,0,0,0,79,80,5,61,0,0,80,16,1,0,0,0,81,82,5,59,0,0,
        82,18,1,0,0,0,83,84,5,44,0,0,84,20,1,0,0,0,85,86,5,58,0,0,86,22,
        1,0,0,0,87,88,5,58,0,0,88,89,5,58,0,0,89,24,1,0,0,0,90,91,5,33,0,
        0,91,26,1,0,0,0,92,93,5,98,0,0,93,94,5,117,0,0,94,95,5,105,0,0,95,
        96,5,108,0,0,96,97,5,100,0,0,97,98,5,95,0,0,98,99,5,102,0,0,99,100,
        5,105,0,0,100,101,5,108,0,0,101,102,5,101,0,0,102,103,5,115,0,0,
        103,104,1,0,0,0,104,105,6,13,0,0,105,28,1,0,0,0,106,107,5,111,0,
        0,107,108,5,117,0,0,108,109,5,116,0,0,109,110,5,112,0,0,110,111,
        5,117,0,0,111,112,5,116,0,0,112,113,5,95,0,0,113,114,5,102,0,0,114,
        115,5,105,0,0,115,116,5,108,0,0,116,117,5,101,0,0,117,118,5,115,
        0,0,118,119,1,0,0,0,119,120,6,14,1,0,120,30,1,0,0,0,121,122,5,104,
        0,0,122,123,5,101,0,0,123,124,5,108,0,0,124,125,5,112,0,0,125,126,
        5,101,0,0,126,127,5,114,0,0,127,128,5,95,0,0,128,129,5,102,0,0,129,
        130,5,105,0,0,130,131,5,108,0,0,131,132,5,101,0,0,132,133,5,115,
        0,0,133,32,1,0,0,0,134,135,5,36,0,0,135,136,5,64,0,0,136,137,1,0,
        0,0,137,138,6,16,1,0,138,34,1,0,0,0,139,140,5,36,0,0,140,141,5,94,
        0,0,141,142,1,0,0,0,142,143,6,17,0,0,143,36,1,0,0,0,144,145,5,46,
        0,0,145,38,1,0,0,0,146,147,5,47,0,0,147,148,5,42,0,0,148,152,1,0,
        0,0,149,151,9,0,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,153,1,0,
        0,0,152,150,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,155,156,5,42,
        0,0,156,157,5,47,0,0,157,40,1,0,0,0,158,160,5,36,0,0,159,161,3,49,
        24,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,
        0,0,163,165,1,0,0,0,164,166,9,0,0,0,165,164,1,0,0,0,166,167,1,0,
        0,0,167,168,1,0,0,0,167,165,1,0,0,0,168,169,1,0,0,0,169,170,5,10,
        0,0,170,42,1,0,0,0,171,173,5,36,0,0,172,174,7,0,0,0,173,172,1,0,
        0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,180,1,0,
        0,0,177,179,7,0,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,
        0,0,180,181,1,0,0,0,181,44,1,0,0,0,182,180,1,0,0,0,183,185,7,0,0,
        0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,
        0,187,191,1,0,0,0,188,190,7,1,0,0,189,188,1,0,0,0,190,193,1,0,0,
        0,191,189,1,0,0,0,191,192,1,0,0,0,192,46,1,0,0,0,193,191,1,0,0,0,
        194,196,7,2,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,
        197,198,1,0,0,0,198,202,1,0,0,0,199,201,7,3,0,0,200,199,1,0,0,0,
        201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,48,1,0,0,0,204,
        202,1,0,0,0,205,206,7,4,0,0,206,207,1,0,0,0,207,208,6,24,2,0,208,
        50,1,0,0,0,209,210,5,10,0,0,210,211,1,0,0,0,211,212,6,25,2,0,212,
        52,1,0,0,0,11,0,66,152,162,167,175,180,186,191,197,202,3,7,1,0,7,
        2,0,6,0,0
    ]

class XbtLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BUILD_FILES = 1
    OUT_FILES = 2
    RULE = 3
    COMMAND = 4
    STRING = 5
    LBRACE = 6
    RBRACE = 7
    LPAR = 8
    RPAR = 9
    EQUAL = 10
    SEMI = 11
    COMMA = 12
    COLON = 13
    DCOLON = 14
    BANG = 15
    HELPER_FILES = 16
    DOT = 17
    ML_COMMENT = 18
    SHELL = 19
    VARIABLE = 20
    IDENT = 21
    PATH = 22
    WS = 23
    NEW_LINE = 24
    DOLLAR_AT = 25
    DOLLAR_CARROT = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'build_files'", "'output_files'", "'rule'", "'cmd'", "'{'", 
            "'}'", "'('", "')'", "'='", "';'", "','", "':'", "'::'", "'!'", 
            "'helper_files'", "'.'", "'\\n'", "'$@'", "'$^'" ]

    symbolicNames = [ "<INVALID>",
            "BUILD_FILES", "OUT_FILES", "RULE", "COMMAND", "STRING", "LBRACE", 
            "RBRACE", "LPAR", "RPAR", "EQUAL", "SEMI", "COMMA", "COLON", 
            "DCOLON", "BANG", "HELPER_FILES", "DOT", "ML_COMMENT", "SHELL", 
            "VARIABLE", "IDENT", "PATH", "WS", "NEW_LINE", "DOLLAR_AT", 
            "DOLLAR_CARROT" ]

    ruleNames = [ "RULE", "COMMAND", "STRING", "LBRACE", "RBRACE", "LPAR", 
                  "RPAR", "EQUAL", "SEMI", "COMMA", "COLON", "DCOLON", "BANG", 
                  "BUILD_FILES", "OUT_FILES", "HELPER_FILES", "DOLLAR_AT", 
                  "DOLLAR_CARROT", "DOT", "ML_COMMENT", "SHELL", "VARIABLE", 
                  "IDENT", "PATH", "WS", "NEW_LINE" ]

    grammarFileName = "XbtLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


