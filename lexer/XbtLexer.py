# Generated from lexer/XbtLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,100,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,1,1,1,5,1,39,8,1,10,1,12,
        1,42,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,67,8,10,10,10,12,10,
        70,9,10,1,10,1,10,1,10,1,11,1,11,5,11,77,8,11,10,11,12,11,80,9,11,
        1,11,1,11,1,12,4,12,85,8,12,11,12,12,12,86,1,12,5,12,90,8,12,10,
        12,12,12,93,9,12,1,13,1,13,1,13,1,13,1,14,1,14,3,40,68,78,0,15,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,1,0,3,4,0,45,47,65,90,95,95,97,122,6,0,33,33,45,47,63,63,
        65,90,95,95,97,122,3,0,9,9,13,13,32,32,104,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,36,1,0,0,0,
        5,45,1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,51,1,0,0,0,13,53,1,0,0,
        0,15,55,1,0,0,0,17,57,1,0,0,0,19,59,1,0,0,0,21,62,1,0,0,0,23,74,
        1,0,0,0,25,84,1,0,0,0,27,94,1,0,0,0,29,98,1,0,0,0,31,32,5,114,0,
        0,32,33,5,117,0,0,33,34,5,108,0,0,34,35,5,101,0,0,35,2,1,0,0,0,36,
        40,5,34,0,0,37,39,9,0,0,0,38,37,1,0,0,0,39,42,1,0,0,0,40,41,1,0,
        0,0,40,38,1,0,0,0,41,43,1,0,0,0,42,40,1,0,0,0,43,44,5,34,0,0,44,
        4,1,0,0,0,45,46,5,123,0,0,46,6,1,0,0,0,47,48,5,125,0,0,48,8,1,0,
        0,0,49,50,5,40,0,0,50,10,1,0,0,0,51,52,5,41,0,0,52,12,1,0,0,0,53,
        54,5,61,0,0,54,14,1,0,0,0,55,56,5,59,0,0,56,16,1,0,0,0,57,58,5,44,
        0,0,58,18,1,0,0,0,59,60,5,36,0,0,60,61,5,94,0,0,61,20,1,0,0,0,62,
        63,5,47,0,0,63,64,5,42,0,0,64,68,1,0,0,0,65,67,9,0,0,0,66,65,1,0,
        0,0,67,70,1,0,0,0,68,69,1,0,0,0,68,66,1,0,0,0,69,71,1,0,0,0,70,68,
        1,0,0,0,71,72,5,42,0,0,72,73,5,47,0,0,73,22,1,0,0,0,74,78,5,36,0,
        0,75,77,9,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,79,1,0,0,0,78,76,
        1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,10,0,0,82,24,1,0,0,0,
        83,85,7,0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,
        0,0,0,87,91,1,0,0,0,88,90,7,1,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,
        89,1,0,0,0,91,92,1,0,0,0,92,26,1,0,0,0,93,91,1,0,0,0,94,95,7,2,0,
        0,95,96,1,0,0,0,96,97,6,13,0,0,97,28,1,0,0,0,98,99,5,10,0,0,99,30,
        1,0,0,0,6,0,40,68,78,86,91,1,6,0,0
    ]

class XbtLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RULE = 1
    STRING = 2
    LBRACE = 3
    RBRACE = 4
    LPAR = 5
    RPAR = 6
    EQUAL = 7
    SEMI = 8
    COMMA = 9
    BANG_CARROT = 10
    ML_COMMENT = 11
    SHELL = 12
    IDENT = 13
    WS = 14
    NEW_LINE = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'rule'", "'{'", "'}'", "'('", "')'", "'='", "';'", "','", "'$^'", 
            "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", "EQUAL", 
            "SEMI", "COMMA", "BANG_CARROT", "ML_COMMENT", "SHELL", "IDENT", 
            "WS", "NEW_LINE" ]

    ruleNames = [ "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", 
                  "EQUAL", "SEMI", "COMMA", "BANG_CARROT", "ML_COMMENT", 
                  "SHELL", "IDENT", "WS", "NEW_LINE" ]

    grammarFileName = "XbtLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


