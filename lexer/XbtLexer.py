# Generated from XbtLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,5,1,59,8,1,10,1,12,1,62,9,1,1,1,1,1,1,2,1,2,1,3,
        1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
        10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,5,18,145,8,18,10,18,12,
        18,148,9,18,1,18,1,18,1,18,1,19,1,19,4,19,155,8,19,11,19,12,19,156,
        1,19,4,19,160,8,19,11,19,12,19,161,1,19,1,19,1,20,1,20,4,20,168,
        8,20,11,20,12,20,169,1,20,5,20,173,8,20,10,20,12,20,176,9,20,1,21,
        4,21,179,8,21,11,21,12,21,180,1,21,5,21,184,8,21,10,21,12,21,187,
        9,21,1,22,4,22,190,8,22,11,22,12,22,191,1,22,5,22,195,8,22,10,22,
        12,22,198,9,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,60,146,
        161,0,25,1,3,3,4,5,5,7,6,9,7,11,8,13,9,15,10,17,11,19,12,21,13,23,
        14,25,1,27,2,29,15,31,24,33,25,35,16,37,17,39,18,41,19,43,20,45,
        21,47,22,49,23,1,0,5,4,0,45,45,65,90,95,95,97,122,5,0,45,45,47,47,
        65,90,95,95,97,122,4,0,45,47,65,90,95,95,97,122,6,0,33,33,45,47,
        63,63,65,90,95,95,97,122,3,0,9,9,13,13,32,32,216,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,56,1,
        0,0,0,5,65,1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,
        1,0,0,0,15,75,1,0,0,0,17,77,1,0,0,0,19,79,1,0,0,0,21,81,1,0,0,0,
        23,84,1,0,0,0,25,86,1,0,0,0,27,100,1,0,0,0,29,115,1,0,0,0,31,128,
        1,0,0,0,33,133,1,0,0,0,35,138,1,0,0,0,37,140,1,0,0,0,39,152,1,0,
        0,0,41,165,1,0,0,0,43,178,1,0,0,0,45,189,1,0,0,0,47,199,1,0,0,0,
        49,203,1,0,0,0,51,52,5,114,0,0,52,53,5,117,0,0,53,54,5,108,0,0,54,
        55,5,101,0,0,55,2,1,0,0,0,56,60,5,34,0,0,57,59,9,0,0,0,58,57,1,0,
        0,0,59,62,1,0,0,0,60,61,1,0,0,0,60,58,1,0,0,0,61,63,1,0,0,0,62,60,
        1,0,0,0,63,64,5,34,0,0,64,4,1,0,0,0,65,66,5,123,0,0,66,6,1,0,0,0,
        67,68,5,125,0,0,68,8,1,0,0,0,69,70,5,40,0,0,70,10,1,0,0,0,71,72,
        5,41,0,0,72,12,1,0,0,0,73,74,5,61,0,0,74,14,1,0,0,0,75,76,5,59,0,
        0,76,16,1,0,0,0,77,78,5,44,0,0,78,18,1,0,0,0,79,80,5,58,0,0,80,20,
        1,0,0,0,81,82,5,58,0,0,82,83,5,58,0,0,83,22,1,0,0,0,84,85,5,33,0,
        0,85,24,1,0,0,0,86,87,5,98,0,0,87,88,5,117,0,0,88,89,5,105,0,0,89,
        90,5,108,0,0,90,91,5,100,0,0,91,92,5,95,0,0,92,93,5,102,0,0,93,94,
        5,105,0,0,94,95,5,108,0,0,95,96,5,101,0,0,96,97,5,115,0,0,97,98,
        1,0,0,0,98,99,6,12,0,0,99,26,1,0,0,0,100,101,5,111,0,0,101,102,5,
        117,0,0,102,103,5,116,0,0,103,104,5,112,0,0,104,105,5,117,0,0,105,
        106,5,116,0,0,106,107,5,95,0,0,107,108,5,102,0,0,108,109,5,105,0,
        0,109,110,5,108,0,0,110,111,5,101,0,0,111,112,5,115,0,0,112,113,
        1,0,0,0,113,114,6,13,1,0,114,28,1,0,0,0,115,116,5,104,0,0,116,117,
        5,101,0,0,117,118,5,108,0,0,118,119,5,112,0,0,119,120,5,101,0,0,
        120,121,5,114,0,0,121,122,5,95,0,0,122,123,5,102,0,0,123,124,5,105,
        0,0,124,125,5,108,0,0,125,126,5,101,0,0,126,127,5,115,0,0,127,30,
        1,0,0,0,128,129,5,36,0,0,129,130,5,64,0,0,130,131,1,0,0,0,131,132,
        6,15,1,0,132,32,1,0,0,0,133,134,5,36,0,0,134,135,5,94,0,0,135,136,
        1,0,0,0,136,137,6,16,0,0,137,34,1,0,0,0,138,139,5,46,0,0,139,36,
        1,0,0,0,140,141,5,47,0,0,141,142,5,42,0,0,142,146,1,0,0,0,143,145,
        9,0,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,147,1,0,0,0,146,144,
        1,0,0,0,147,149,1,0,0,0,148,146,1,0,0,0,149,150,5,42,0,0,150,151,
        5,47,0,0,151,38,1,0,0,0,152,154,5,36,0,0,153,155,3,47,23,0,154,153,
        1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,
        1,0,0,0,158,160,9,0,0,0,159,158,1,0,0,0,160,161,1,0,0,0,161,162,
        1,0,0,0,161,159,1,0,0,0,162,163,1,0,0,0,163,164,5,10,0,0,164,40,
        1,0,0,0,165,167,5,36,0,0,166,168,7,0,0,0,167,166,1,0,0,0,168,169,
        1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,174,1,0,0,0,171,173,
        7,0,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,
        1,0,0,0,175,42,1,0,0,0,176,174,1,0,0,0,177,179,7,0,0,0,178,177,1,
        0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,185,1,
        0,0,0,182,184,7,1,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,
        0,0,0,185,186,1,0,0,0,186,44,1,0,0,0,187,185,1,0,0,0,188,190,7,2,
        0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,1,0,
        0,0,192,196,1,0,0,0,193,195,7,3,0,0,194,193,1,0,0,0,195,198,1,0,
        0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,46,1,0,0,0,198,196,1,0,0,
        0,199,200,7,4,0,0,200,201,1,0,0,0,201,202,6,23,2,0,202,48,1,0,0,
        0,203,204,5,10,0,0,204,205,1,0,0,0,205,206,6,24,2,0,206,50,1,0,0,
        0,11,0,60,146,156,161,169,174,180,185,191,196,3,7,1,0,7,2,0,6,0,
        0
    ]

class XbtLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BUILD_FILES = 1
    OUT_FILES = 2
    RULE = 3
    STRING = 4
    LBRACE = 5
    RBRACE = 6
    LPAR = 7
    RPAR = 8
    EQUAL = 9
    SEMI = 10
    COMMA = 11
    COLON = 12
    DCOLON = 13
    BANG = 14
    HELPER_FILES = 15
    DOT = 16
    ML_COMMENT = 17
    SHELL = 18
    VARIABLE = 19
    IDENT = 20
    PATH = 21
    WS = 22
    NEW_LINE = 23
    DOLLAR_AT = 24
    DOLLAR_CARROT = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'build_files'", "'output_files'", "'rule'", "'{'", "'}'", "'('", 
            "')'", "'='", "';'", "','", "':'", "'::'", "'!'", "'helper_files'", 
            "'.'", "'\\n'", "'$@'", "'$^'" ]

    symbolicNames = [ "<INVALID>",
            "BUILD_FILES", "OUT_FILES", "RULE", "STRING", "LBRACE", "RBRACE", 
            "LPAR", "RPAR", "EQUAL", "SEMI", "COMMA", "COLON", "DCOLON", 
            "BANG", "HELPER_FILES", "DOT", "ML_COMMENT", "SHELL", "VARIABLE", 
            "IDENT", "PATH", "WS", "NEW_LINE", "DOLLAR_AT", "DOLLAR_CARROT" ]

    ruleNames = [ "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", 
                  "EQUAL", "SEMI", "COMMA", "COLON", "DCOLON", "BANG", "BUILD_FILES", 
                  "OUT_FILES", "HELPER_FILES", "DOLLAR_AT", "DOLLAR_CARROT", 
                  "DOT", "ML_COMMENT", "SHELL", "VARIABLE", "IDENT", "PATH", 
                  "WS", "NEW_LINE" ]

    grammarFileName = "XbtLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


