# Generated from XbtLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,1,1,1,5,1,
        55,8,1,10,1,12,1,58,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,5,16,127,8,16,10,16,12,16,130,9,16,1,16,1,16,1,
        16,1,17,1,17,4,17,137,8,17,11,17,12,17,138,1,17,4,17,142,8,17,11,
        17,12,17,143,1,17,1,17,1,18,1,18,4,18,150,8,18,11,18,12,18,151,1,
        18,5,18,155,8,18,10,18,12,18,158,9,18,1,19,4,19,161,8,19,11,19,12,
        19,162,1,19,5,19,166,8,19,10,19,12,19,169,9,19,1,20,4,20,172,8,20,
        11,20,12,20,173,1,20,5,20,177,8,20,10,20,12,20,180,9,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,3,56,128,143,0,23,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,5,4,0,45,45,65,90,
        95,95,97,122,5,0,45,45,47,47,65,90,95,95,97,122,4,0,45,47,65,90,
        95,95,97,122,6,0,33,33,45,47,63,63,65,90,95,95,97,122,3,0,9,9,13,
        13,32,32,198,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,52,
        1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,13,
        69,1,0,0,0,15,71,1,0,0,0,17,73,1,0,0,0,19,75,1,0,0,0,21,77,1,0,0,
        0,23,80,1,0,0,0,25,92,1,0,0,0,27,105,1,0,0,0,29,117,1,0,0,0,31,119,
        1,0,0,0,33,122,1,0,0,0,35,134,1,0,0,0,37,147,1,0,0,0,39,160,1,0,
        0,0,41,171,1,0,0,0,43,181,1,0,0,0,45,185,1,0,0,0,47,48,5,114,0,0,
        48,49,5,117,0,0,49,50,5,108,0,0,50,51,5,101,0,0,51,2,1,0,0,0,52,
        56,5,34,0,0,53,55,9,0,0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,57,1,0,
        0,0,56,54,1,0,0,0,57,59,1,0,0,0,58,56,1,0,0,0,59,60,5,34,0,0,60,
        4,1,0,0,0,61,62,5,123,0,0,62,6,1,0,0,0,63,64,5,125,0,0,64,8,1,0,
        0,0,65,66,5,40,0,0,66,10,1,0,0,0,67,68,5,41,0,0,68,12,1,0,0,0,69,
        70,5,61,0,0,70,14,1,0,0,0,71,72,5,59,0,0,72,16,1,0,0,0,73,74,5,44,
        0,0,74,18,1,0,0,0,75,76,5,58,0,0,76,20,1,0,0,0,77,78,5,58,0,0,78,
        79,5,58,0,0,79,22,1,0,0,0,80,81,5,98,0,0,81,82,5,117,0,0,82,83,5,
        105,0,0,83,84,5,108,0,0,84,85,5,100,0,0,85,86,5,95,0,0,86,87,5,102,
        0,0,87,88,5,105,0,0,88,89,5,108,0,0,89,90,5,101,0,0,90,91,5,115,
        0,0,91,24,1,0,0,0,92,93,5,111,0,0,93,94,5,117,0,0,94,95,5,116,0,
        0,95,96,5,112,0,0,96,97,5,117,0,0,97,98,5,116,0,0,98,99,5,95,0,0,
        99,100,5,102,0,0,100,101,5,105,0,0,101,102,5,108,0,0,102,103,5,101,
        0,0,103,104,5,115,0,0,104,26,1,0,0,0,105,106,5,119,0,0,106,107,5,
        97,0,0,107,108,5,116,0,0,108,109,5,99,0,0,109,110,5,104,0,0,110,
        111,5,95,0,0,111,112,5,102,0,0,112,113,5,105,0,0,113,114,5,108,0,
        0,114,115,5,101,0,0,115,116,5,115,0,0,116,28,1,0,0,0,117,118,5,46,
        0,0,118,30,1,0,0,0,119,120,5,36,0,0,120,121,5,94,0,0,121,32,1,0,
        0,0,122,123,5,47,0,0,123,124,5,42,0,0,124,128,1,0,0,0,125,127,9,
        0,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,129,1,0,0,0,128,126,1,
        0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,132,5,42,0,0,132,133,5,
        47,0,0,133,34,1,0,0,0,134,136,5,36,0,0,135,137,3,43,21,0,136,135,
        1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,
        1,0,0,0,140,142,9,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,144,
        1,0,0,0,143,141,1,0,0,0,144,145,1,0,0,0,145,146,5,10,0,0,146,36,
        1,0,0,0,147,149,5,36,0,0,148,150,7,0,0,0,149,148,1,0,0,0,150,151,
        1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,156,1,0,0,0,153,155,
        7,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,
        1,0,0,0,157,38,1,0,0,0,158,156,1,0,0,0,159,161,7,0,0,0,160,159,1,
        0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,167,1,
        0,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,
        0,0,0,167,168,1,0,0,0,168,40,1,0,0,0,169,167,1,0,0,0,170,172,7,2,
        0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,
        0,0,174,178,1,0,0,0,175,177,7,3,0,0,176,175,1,0,0,0,177,180,1,0,
        0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,42,1,0,0,0,180,178,1,0,0,
        0,181,182,7,4,0,0,182,183,1,0,0,0,183,184,6,21,0,0,184,44,1,0,0,
        0,185,186,5,10,0,0,186,187,1,0,0,0,187,188,6,22,0,0,188,46,1,0,0,
        0,11,0,56,128,138,143,151,156,162,167,173,178,1,6,0,0
    ]

class XbtLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RULE = 1
    STRING = 2
    LBRACE = 3
    RBRACE = 4
    LPAR = 5
    RPAR = 6
    EQUAL = 7
    SEMI = 8
    COMMA = 9
    COLON = 10
    DCOLON = 11
    BUILD_FILES = 12
    OUT_FILES = 13
    WATCH_FILES = 14
    DOT = 15
    BANG_CARROT = 16
    ML_COMMENT = 17
    SHELL = 18
    VARIABLE = 19
    IDENT = 20
    PATH = 21
    WS = 22
    NEW_LINE = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'rule'", "'{'", "'}'", "'('", "')'", "'='", "';'", "','", "':'", 
            "'::'", "'build_files'", "'output_files'", "'watch_files'", 
            "'.'", "'$^'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", "EQUAL", 
            "SEMI", "COMMA", "COLON", "DCOLON", "BUILD_FILES", "OUT_FILES", 
            "WATCH_FILES", "DOT", "BANG_CARROT", "ML_COMMENT", "SHELL", 
            "VARIABLE", "IDENT", "PATH", "WS", "NEW_LINE" ]

    ruleNames = [ "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", 
                  "EQUAL", "SEMI", "COMMA", "COLON", "DCOLON", "BUILD_FILES", 
                  "OUT_FILES", "WATCH_FILES", "DOT", "BANG_CARROT", "ML_COMMENT", 
                  "SHELL", "VARIABLE", "IDENT", "PATH", "WS", "NEW_LINE" ]

    grammarFileName = "XbtLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


