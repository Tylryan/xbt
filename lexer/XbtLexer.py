# Generated from XbtLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,133,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,5,1,43,8,1,10,1,12,1,46,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,
        10,71,8,10,10,10,12,10,74,9,10,1,10,1,10,1,10,1,11,1,11,4,11,81,
        8,11,11,11,12,11,82,1,11,4,11,86,8,11,11,11,12,11,87,1,11,1,11,1,
        12,1,12,4,12,94,8,12,11,12,12,12,95,1,12,5,12,99,8,12,10,12,12,12,
        102,9,12,1,13,4,13,105,8,13,11,13,12,13,106,1,13,5,13,110,8,13,10,
        13,12,13,113,9,13,1,14,4,14,116,8,14,11,14,12,14,117,1,14,5,14,121,
        8,14,10,14,12,14,124,9,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        3,44,72,87,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,5,4,0,45,45,65,90,95,
        95,97,122,5,0,45,45,47,47,65,90,95,95,97,122,4,0,45,47,65,90,95,
        95,97,122,6,0,33,33,45,47,63,63,65,90,95,95,97,122,3,0,9,9,13,13,
        32,32,142,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,40,1,0,0,0,5,49,1,
        0,0,0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,59,
        1,0,0,0,17,61,1,0,0,0,19,63,1,0,0,0,21,66,1,0,0,0,23,78,1,0,0,0,
        25,91,1,0,0,0,27,104,1,0,0,0,29,115,1,0,0,0,31,125,1,0,0,0,33,129,
        1,0,0,0,35,36,5,114,0,0,36,37,5,117,0,0,37,38,5,108,0,0,38,39,5,
        101,0,0,39,2,1,0,0,0,40,44,5,34,0,0,41,43,9,0,0,0,42,41,1,0,0,0,
        43,46,1,0,0,0,44,45,1,0,0,0,44,42,1,0,0,0,45,47,1,0,0,0,46,44,1,
        0,0,0,47,48,5,34,0,0,48,4,1,0,0,0,49,50,5,123,0,0,50,6,1,0,0,0,51,
        52,5,125,0,0,52,8,1,0,0,0,53,54,5,40,0,0,54,10,1,0,0,0,55,56,5,41,
        0,0,56,12,1,0,0,0,57,58,5,61,0,0,58,14,1,0,0,0,59,60,5,59,0,0,60,
        16,1,0,0,0,61,62,5,44,0,0,62,18,1,0,0,0,63,64,5,36,0,0,64,65,5,94,
        0,0,65,20,1,0,0,0,66,67,5,47,0,0,67,68,5,42,0,0,68,72,1,0,0,0,69,
        71,9,0,0,0,70,69,1,0,0,0,71,74,1,0,0,0,72,73,1,0,0,0,72,70,1,0,0,
        0,73,75,1,0,0,0,74,72,1,0,0,0,75,76,5,42,0,0,76,77,5,47,0,0,77,22,
        1,0,0,0,78,80,5,36,0,0,79,81,3,31,15,0,80,79,1,0,0,0,81,82,1,0,0,
        0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,86,9,0,0,0,85,84,
        1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,87,85,1,0,0,0,88,89,1,0,0,0,
        89,90,5,10,0,0,90,24,1,0,0,0,91,93,5,36,0,0,92,94,7,0,0,0,93,92,
        1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,100,1,0,0,0,
        97,99,7,1,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,
        1,0,0,0,101,26,1,0,0,0,102,100,1,0,0,0,103,105,7,0,0,0,104,103,1,
        0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,111,1,
        0,0,0,108,110,7,1,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,
        0,0,0,111,112,1,0,0,0,112,28,1,0,0,0,113,111,1,0,0,0,114,116,7,2,
        0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,
        0,0,118,122,1,0,0,0,119,121,7,3,0,0,120,119,1,0,0,0,121,124,1,0,
        0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,30,1,0,0,0,124,122,1,0,0,
        0,125,126,7,4,0,0,126,127,1,0,0,0,127,128,6,15,0,0,128,32,1,0,0,
        0,129,130,5,10,0,0,130,131,1,0,0,0,131,132,6,16,0,0,132,34,1,0,0,
        0,11,0,44,72,82,87,95,100,106,111,117,122,1,6,0,0
    ]

class XbtLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RULE = 1
    STRING = 2
    LBRACE = 3
    RBRACE = 4
    LPAR = 5
    RPAR = 6
    EQUAL = 7
    SEMI = 8
    COMMA = 9
    BANG_CARROT = 10
    ML_COMMENT = 11
    SHELL = 12
    VARIABLE = 13
    IDENT = 14
    PATH = 15
    WS = 16
    NEW_LINE = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'rule'", "'{'", "'}'", "'('", "')'", "'='", "';'", "','", "'$^'", 
            "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", "EQUAL", 
            "SEMI", "COMMA", "BANG_CARROT", "ML_COMMENT", "SHELL", "VARIABLE", 
            "IDENT", "PATH", "WS", "NEW_LINE" ]

    ruleNames = [ "RULE", "STRING", "LBRACE", "RBRACE", "LPAR", "RPAR", 
                  "EQUAL", "SEMI", "COMMA", "BANG_CARROT", "ML_COMMENT", 
                  "SHELL", "VARIABLE", "IDENT", "PATH", "WS", "NEW_LINE" ]

    grammarFileName = "XbtLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


